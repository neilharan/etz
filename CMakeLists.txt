cmake_minimum_required (VERSION 3.8.0)
project(etz CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS NO)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(CheckCXXCompilerFlag)
include(AddCXXCompilerFlag)

if (MSVC)
    string(REGEX REPLACE "[-/]W[1-4]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")

    add_cxx_compiler_flag(/GS-)
    add_cxx_compiler_flag(/Ob2)
    add_cxx_compiler_flag(/Oi)
    add_cxx_compiler_flag(/Ot)
    add_cxx_compiler_flag(/Oy)
    add_cxx_compiler_flag(/GT)
    add_cxx_compiler_flag(/GL)
    add_cxx_compiler_flag(/Zc:__cplusplus)
    
    if (NOT "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
        add_cxx_compiler_flag(/QIntel-jcc-erratum)
        add_cxx_compiler_flag(/fp:fast)
    else()
        add_cxx_compiler_flag(-march=native)
    endif()    

    foreach(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
        string(REPLACE /GR /GR- "${flag_var}" "${${flag_var}}")
        string(REPLACE /EHsc /EHsc- "${flag_var}" "${${flag_var}}")
    endforeach()
    
    add_definitions(-D_HAS_EXCEPTIONS=0)
    add_definitions(-D_ITERATOR_DEBUG_LEVEL=0)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)

    if (NOT "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
        set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE} /LTCG")
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
    endif()
else()
    add_cxx_compiler_flag(-O3)
    add_cxx_compiler_flag(-march=native)
    add_cxx_compiler_flag(-mtune=native)
    add_cxx_compiler_flag(-Wall)
    add_cxx_compiler_flag(-Wextra)
    add_cxx_compiler_flag(-Wshadow)
    add_cxx_compiler_flag(-Werror)
    add_cxx_compiler_flag(-pedantic)
    add_cxx_compiler_flag(-pedantic-errors)
    add_cxx_compiler_flag(-Wshorten-64-to-32)
    add_cxx_compiler_flag(-fstrict-aliasing)
    add_cxx_compiler_flag(-Wno-deprecated)
    add_cxx_compiler_flag(-fno-exceptions)
    add_cxx_compiler_flag(-Wthread-safety)
    add_cxx_compiler_flag(-flto)
    
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      find_program(GCC_AR gcc-ar)
      if (GCC_AR)
        set(CMAKE_AR ${GCC_AR})
      endif()
      find_program(GCC_RANLIB gcc-ranlib)
      if (GCC_RANLIB)
        set(CMAKE_RANLIB ${GCC_RANLIB})
      endif()
    elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
      include(llvm-toolchain)
    endif()
endif()

add_subdirectory(test)
